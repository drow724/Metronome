{"version":3,"file":"static/js/329.638d0f26.chunk.js","mappings":"+FAEA,IAAIA,E,qEAEJ,IACIC,EAAe,EAGbC,EAAe,IAAIC,aAGrBC,EAASF,EAAaG,qBAC1BD,EAAOE,OAASJ,EAAaK,aAAa,EAAG,EAAG,OAGhDH,EAAOI,MAAM,GAEb,IAAIC,EAAQ,EA+BL,SAASD,EAAME,EAAKC,EAAQC,EAAiBC,GAClD,IAAMC,EAAaZ,EAAaa,aAChCD,EAAWE,KAAKC,MAAQN,EACxBG,EAAWI,QAAQhB,EAAaiB,aAChCnB,EAASoB,aAAY,YAjCvB,SAAgBV,EAAKI,EAAYF,EAAiBC,GAKhD,IAJA,IAAMQ,EAAiB,GAAOX,EAIvBT,EAAeC,EAAaoB,YAAc,IAAK,CAEpD,IAAMC,EAAMrB,EAAasB,mBACzBD,EAAIL,QAAQJ,GAEVS,EAAIE,UAAUR,MADZR,EAAQG,IAAoB,EACR,IAEA,IAIxBW,EAAIf,MAAMP,GAGVsB,EAAIG,KAAKzB,EAAe,MAGxBA,GAAgBoB,EAGhBR,IADAJ,EAEF,CACF,CAOIkB,CAAOjB,EAAKI,EAAYF,EAAiBC,EAC3C,GAAG,IACL,CAEO,SAASa,IACdE,cAAc5B,GACdS,EAAQ,CACV,C","sources":["worker.js"],"sourcesContent":["/* eslint-disable no-restricted-globals */\r\n// assume ./worker.ts contains\r\nlet result;\r\n\r\nconst volume = 0.5;\r\nlet nextNoteTime = 1.0;\r\n\r\n// create the audio context\r\nconst audioContext = new AudioContext();\r\n\r\n// create a buffer source and add the buffer\r\nvar source = audioContext.createBufferSource();\r\nsource.buffer = audioContext.createBuffer(1, 1, 22050);\r\n\r\n// start playing the audio data immediately\r\nsource.start(0);\r\n\r\nlet index = 1;\r\n\r\nfunction rhythm(bpm, volumeNode, beatsPerMeasure, fn) {\r\n  const secondsPerBeat = 60.0 / bpm;\r\n  // when it is time to schedule a note to play\r\n  // we use while becuase audioContext time is incrementing even when paused\r\n  // so we loop until the nextNoteTime catches up\r\n  while (nextNoteTime < audioContext.currentTime + 0.1) {\r\n    // create an oscillator which generates a constant tone (a beep)\r\n    const osc = audioContext.createOscillator();\r\n    osc.connect(volumeNode);\r\n    if (index % beatsPerMeasure === 1) {\r\n      osc.frequency.value = 880.0;\r\n    } else {\r\n      osc.frequency.value = 440.0;\r\n    }\r\n\r\n    // start the beep at the next note time\r\n    osc.start(nextNoteTime);\r\n\r\n    // stop the beep after at the note length\r\n    osc.stop(nextNoteTime + 0.075);\r\n\r\n    // calculate the time of the next note\r\n    nextNoteTime += secondsPerBeat;\r\n\r\n    index++;\r\n    fn(index);\r\n  }\r\n}\r\n\r\nexport function start(bpm, volume, beatsPerMeasure, fn) {\r\n  const volumeNode = audioContext.createGain();\r\n  volumeNode.gain.value = volume;\r\n  volumeNode.connect(audioContext.destination);\r\n  result = setInterval(() => {\r\n    rhythm(bpm, volumeNode, beatsPerMeasure, fn);\r\n  }, 100);\r\n}\r\n\r\nexport function stop() {\r\n  clearInterval(result);\r\n  index = 1;\r\n}\r\n"],"names":["result","nextNoteTime","audioContext","AudioContext","source","createBufferSource","buffer","createBuffer","start","index","bpm","volume","beatsPerMeasure","fn","volumeNode","createGain","gain","value","connect","destination","setInterval","secondsPerBeat","currentTime","osc","createOscillator","frequency","stop","rhythm","clearInterval"],"sourceRoot":""}